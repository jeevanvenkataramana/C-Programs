Inheritance:
 Property where a derived class acquires functions of a base class.


Example:

code :

#include<iostream>
using namespace std;

class person
{
public:
	void activity(){
		cout<<"Eat and sleep"<<endl;
	}
};
class student: public person
{
public:
	void study(){
		cout<<"Eat and study"<<endl;
	}
};
int main()
{
	student a;
	a.study();
	a.activity();
}


Output:

Eat and study
Eat and sleep

Override a definition: A derived class having its own version of function


Assigning base class members from derived class


/*
 * Inheritance_derived.cpp
 *
 *  Created on: Oct 19, 2018
 *      Author: jeevan venkataramana
 */




#include<iostream>

using namespace std;

class person
{
public:
	string name;
public:
	person(string name)
	{
		this->name=name;
	}

};


class student: public person
{
public:
	int id;
public:
student(string name, int id):person(name)
{
	this->name=name;
	this->id=id;
}

void print()
{
	cout<<"Name :"<<name<<"  id "<<id<<endl;
}
};

int main()
{
	student a("jeevan",37);
	a.print();
}

Output:
Name :jeevan  id 37






Diamond problem: if virtual keyword is not given it will have 2 copies of activity.


#include<iostream>
using namespace std;

class person
{
public:
	void activity()
	{
		cout<<"Eat and sleep"<<endl;
	}
};

class student: public virtual person
{
public:
	void study()	{
		cout<<"Eat and study"<<endl;
	}
};

class employee: public virtual person
{
public:
	void work(){
		cout<<"Eat and work"<<endl;
	}
};

class intern: public employee, public student
{
public:
	void task(){
		cout<<"Eat study and work"<<endl;
	}
};

int main()
{
	intern a;
	a.activity();
	a.study();
	a.work();
	a.task();
}


Output:

Eat and sleep
Eat and study
Eat and work
Eat study and work





