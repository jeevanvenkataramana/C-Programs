#include<stack>

LIFO 

Declaration

stack<data_type> stack_name;


empty() – Returns whether the stack is empty

size() – Returns the size of the stack

top() – Returns a reference to the top most element of the stack

push(g) – Adds the element ‘g’ at the top of the stack

pop() – Deletes the top most element of the stack

swap(stack1,stack2)  - Exchanges contentrs of stack1 with stack2







Implementing queue with two stacks

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

class MyQueue {
  
    public:
        stack<int> stack_newest_on_top, stack_oldest_on_top;   
        void push(int x) {
            if(stack_newest_on_top.empty())
            {
                stack_newest_on_top.push(x);
                stack_oldest_on_top.push(x);
                return;
            }
            stack_newest_on_top.push(x);
            stack<int> temp=stack_newest_on_top;
            while(!stack_oldest_on_top.empty())
            {
                stack_oldest_on_top.pop();
            }
            while(!temp.empty())
            {
                stack_oldest_on_top.push(temp.top());
                temp.pop();
            }
            return;
        }

        void pop() {

            stack_oldest_on_top.pop();
            while(!stack_newest_on_top.empty())
            {
                stack_oldest_on_top.push(stack_newest_on_top.top());
                stack_newest_on_top.pop();
            }
            stack_oldest_on_top.pop();
            while(stack_newest_on_top.size()!=stack_oldest_on_top.size())
            {
                stack_newest_on_top.push(stack_oldest_on_top.top());
                stack_oldest_on_top.pop();
            }
                
            return;           
        }

        int front() {
        
           return(stack_oldest_on_top.top());
        }
};

int main() {
    MyQueue q1;
    int q, type, x;
    cin >> q;
    
    for(int i = 0; i < q; i++) {
        cin >> type;
        if(type == 1) {
            cin >> x;
            q1.push(x);
        }
        else if(type == 2) {
            q1.pop();
        }
        else cout << q1.front() << endl;
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}
