/*
 * DFS.cpp
 *
 *  Created on: Oct 13, 2018
 *      Author: jeevan venkataramana
 */


#include<iostream>
#include<vector>
using namespace std;
struct Node
{
	int value;
	Node* left_child;
	Node* right_child;
	bool visited;
};

Node* dfs(Node* node, int target)
{
	cout<<node->value;
	node->visited=true;

	if(node->value == target)
	{
		return node;
	}

	Node* nodes[3]=(node->right_child, node->parent, node->left_child);

	for(int i=0; i<3; i++)
	{
		if(nodes[i] && !nodes[i]->visited)
		{
			Node* result=dfs(nodes[i],target);
			if(result)
			{
				return result;
			}
		}
	}
}

int main()
{
	Node* temp1= new Node;
	Node* temp2= new Node;
	Node* temp3= new Node;
	Node* temp4= new Node;
	Node* temp5= new Node;
	Node* temp6= new Node;
	Node* temp7= new Node;
	Node* temp8= new Node;
	Node* temp9= new Node;
	Node* temp10= new Node;
	Node* temp11= new Node;
	Node* temp12= new Node;
	Node* temp13= new Node;
	Node* temp14= new Node;
	Node* temp15= new Node;

	temp1->value=5;
	temp1->left_child=temp2;
	temp1->right_child=temp10;




}
